# The Single Entity

> *I want to be alone.*
>
> Attributed to Greta Garbo

#### Learning Objectives {.unnumbered}

Students completing this chapter will be able to

-   model a single entity;

-   define a single database;

-   write queries for a single-table database.

## The relational model {.unnumbered}

The relational model introduced by Codd in 1970 is the most popular technology for managing large collections of data. In this chapter, the major concepts of the relational model are introduced. Extensive coverage of the relational model is left until Chapter 8, by which time you will have sufficient practical experience to appreciate fully its usefulness, value, and elegance.

A **relation**, similar to the mathematical concept of a set, is a two-dimensional table arranged in rows and columns. This is a very familiar idea. You have been using tables for many years. A **relational database** is a collection of relations, where **relation** is a mathematical term for a table. One row of a table stores details of one observation, instance, or case of an item about which facts are retained---for example, one row for details of a particular student. All the rows in a table store data about the same type of item. Thus, a database might have one table for student data and another table for class data. Similarly, each column in the table contains the same type of data. For example, the first column might record a student's identification number. A key database design question is to decide what to store in each table. What should the rows and columns contain?

In a relational database, each row must be uniquely identified. There must be a **primary key**, such as student identifier, so that a particular row can be designated. The use of unique identifiers is very common. Telephone numbers and e-mail addresses are examples of unique identifiers. Selection of the primary key, or unique identifier, is another key issue of database design.

> 💠 **Global legal entity identifier (LEI)**
>
> There is no global standard for identifying legal entities across markets and jurisdictions. The need for such a standard was amplified by Lehman Brothers collapse in 2008. Lehman had 209 registered subsidiaries, legal entities, in 21 countries, and it was party to more than 900,000 derivatives contracts upon its collapse. Key stakeholders, such as financial regulators and Lehman's creditors, were unable to assess their exposure. Furthermore, others were unable to assess the possible ripple on them of the effects of the collapse because of the transitive nature of many investments (i.e., A owes B, B owes C, and C owes D).
>
> The adoption of a global [legal entity identifier](https://www.lei-worldwide.com) (LEI), should improve financial system regulation and corporate risk management. Regulators will find it easier to monitor and analyze threats to financial stability and risk managers will be more able evaluate their companies' risks.

The tables in a relational database are **connected** or **related** by means of the data in the tables. You will learn, in the next chapter, that this connection is through a pair of values---a primary key and a foreign key. Consider a table of airlines serving a city. When examining this table, you may not recognize the code of an airline, so you then go to another table to find the name of the airline. For example, if you inspect the next table, you find that AM is an international airline serving Atlanta.

*International airlines serving Atlanta*

| Airline |
|:--------|
| AM      |
| JL      |
| KX      |
| LM      |
| MA      |
| OS      |
| RG      |
| SN      |
| SR      |
| LH      |
| LY      |

If you don't know which airline has the abbreviation AM, then you need to look at the table of airline codes to discover that AeroMexico, with code AM, serves Atlanta. The two tables are related by airline code. Later, you will discover which is the primary key and which is the foreign key.

*A partial list of airline codes*

| Code | Airline                  |
|:-----|:-------------------------|
| AA   | American Airlines        |
| AC   | Air Canada               |
| AD   | Lone Star Airlines       |
| AE   | Mandarin Airlines        |
| AF   | Air France               |
| AG   | Interprovincial Airlines |
| AI   | Air India                |
| AM   | AeroMexico               |
| AQ   | Aloha Airlines           |

When designing the relational model, Codd provided commands for processing multiple records at a time. His intention was to increase the productivity of programmers by moving beyond the record-at-a-time processing that is found in most programming languages. Consequently, the relational model supports set processing (multiple records-at-a-time), which is most frequently implemented as **Structured Query Language (SQL).**[^singleentity-1]

[^singleentity-1]: Officially pronounced as "S-Q-L," but often also pronounced as "sequel".

The relational model separates the logical design of a database from its physical storage. This notion of **data independence** simplifies data modeling and database programming. In this section, we focus on logical database design, and now that you have had a brief introduction to the relational model, you are ready to learn data modeling.

## Getting started {.unnumbered}

As with most construction projects, building a relational database must be preceded by a design phase. Data modeling, our design technique, is a method for creating a plan or blueprint of a database. The data model must accurately mirror real-world relationships if it is to support processing business transactions and managerial decision making.

Rather than getting bogged down with a *theory first, application later* approach to database design and use, we will start with application. We will get back to theory when you have some experience in data modeling and database querying. After all, you did not learn to talk by first studying sentence formation; you just started by learning and using simple words. We start with the simplest data model, a single entity, and the simplest database, a single table, as follows.

| Share code | Share name          | Share price | Share quantity | Share dividend | PE ratio |
|:-----------|:-----------|-----------:|-----------:|-----------:|-----------:|
| FC         | Freedonia Copper    |        27.5 |         10,529 |           1.84 |       16 |
| PT         | Patagonian Tea      |       55.25 |         12,635 |           2.50 |       10 |
| AR         | Abyssinian Ruby     |       31.82 |         22,010 |           1.32 |       13 |
| SLG        | Sri Lankan Gold     |       50.37 |         32,868 |           2.68 |       16 |
| ILZ        | Indian Lead & Zinc  |       37.75 |          6,390 |           3.00 |       12 |
| BE         | Burmese Elephant    |        0.07 |        154,713 |           0.01 |        3 |
| BS         | Bolivian Sheep      |       12.75 |        231,678 |           1.78 |       11 |
| NG         | Nigerian Geese      |       35.00 |         12,323 |           1.68 |       10 |
| CS         | Canadian Sugar      |       52.78 |          4,716 |           2.50 |       15 |
| ROF        | Royal Ostrich Farms |       33.75 |      1,234,923 |           3.00 |        6 |

## Modeling a single-entity database {.unnumbered}

The simplest database contains information about one entity, which is some real-world thing. Some entities are physical---CUSTOMER, ORDER, and STUDENT; others are abstract or conceptual---WORK ASSIGNMENT, and AUTHORSHIP. We represent an entity by a rectangle: the following figure shows a representation of the entity SHARE. The name of the entity is shown in singular form in uppercase in the top part of the rectangle.

*The entity SHARE*

![](Figures/Chapter%203/share.png){width="152"}

An entity has characteristics or attributes. An **attribute** is a discrete element of data; it is not usually broken down into smaller components. Attributes are describe the data we want to store. Some attributes of the entity SHARE are *share code*, *share name*, *share price*, *share quantity* (number owned), *share dividend*, and *PE ratio* (price-to-earnings ratio).[^singleentity-2] Attributes are shown below the entity's name. Notice that we refer to *share price*, rather than *price*, to avoid confusion if there should be another entity with an attribute called *price*. Attribute names must be carefully selected so that they are self-explanatory and unique. For example, *share dividend* is easily recognized as belonging to the entity SHARE.

[^singleentity-2]: Attributes are shown in italics.

*The entity SHARE and its attributes*

![](Figures/Chapter%203/share%20with%20attributes.png){width="152"}

An **instance** is a particular occurrence of an entity (e.g., facts about Freedonia Copper). To avoid confusion, each instance of an entity needs to be uniquely identified. Consider the case of customer billing. In most cases, a request to bill Smith \$100 cannot be accurately processed because a firm might have more than one Smith in its customer file. If a firm has carefully controlled procedures for ensuring that each customer has a unique means of identification, then a request to bill customer number 1789 \$100 can be accurately processed. An attribute or collection of attributes that uniquely identifies an instance of an entity is called an **identifier**. The identifier for the entity SHARE is *share code*, a unique identifier assigned by the stock exchange to a firm issuing shares.

There may be several attributes, or combinations of attributes, that are feasible identifiers for an instance of an entity. Attributes that are identifiers are prefixed by an asterisk. The following figure shows an example of a representation of an entity, its attributes, and identifier.

*The entity SHARE, its attributes, and identifier*

![](Figures/Chapter%203/share%20with%20identifier.png){width="152"}

Briefly, entities are things in the environment about which we wish to store information. Attributes describe an entity. An entity must have a unique identifier.

The modeling language used in this text is designed to record the essential details of a data model. The number of modeling symbols to learn is small, and they preserve all the fundamental concepts of data modeling. Since data modeling often occurs in a variety of settings, the symbols used have been selected so that they can be quickly drawn using pencil-and-paper, whiteboard, or a general-purpose drawing program. This also means that models can be quickly revised as parts can be readily erased and redrawn.

The symbols are distinct and visual clutter is minimized because only the essential information is recorded. This also makes the language easy for clients to learn so they can read and amend models.

Models can be rapidly translated to a set of tables for a relational database. More importantly, since this text implements the fundamental notions of all data modeling languages, you can quickly convert to another data modeling dialect. Data modeling is a high-level skill, and the emphasis needs to be on learning to think like a data modeler rather than on learning a modeling language. This text's goal is to get you off to a fast start.

> ❓ *Skill builder*

> A ship has a name, registration code, gross tonnage, and a year of \>construction. Ships are classified as cargo or passenger. Draw a data model \>for a ship.

## Creating a single-table database {.unnumbered}

The next stage is to translate the data model into a relational database. The translation rules are very direct:

-   Each entity becomes a table.

-   The entity name becomes the table name.

-   Each attribute becomes a column.

-   The identifier becomes the primary key.

The American National Standards Institute's (ANSI) recommended language for relational database definition and manipulation is SQL, which is both a data definition language (DDL) (to define a database), a data manipulation language (DML) (to query and maintain a database), and a data control language (DCL) (to control access). SQL is a common standard for describing and querying databases and is available with many commercial relational database products, including DB2, Oracle, and Microsoft SQL Server, and open source products such as MySQL and PostgreSQL.

In this book, MySQL is the relational database for teaching SQL. Because SQL is a standard, it does not matter which implementation of the relational model you use as the SQL language is common across both the proprietary and open variants.[^singleentity-3] SQL uses the CREATE[^singleentity-4] statement to define a table. It is not a particularly friendly command, and most products have friendlier interfaces for defining tables. However, it is important to learn the standard, because this is the command that SQL understands. Also, a table definition interface will generate a CREATE statement for execution by SQL. Your interface interactions ultimately translate into a standard SQL command.

[^singleentity-3]: Now would be a good time to install the [MySQL Community server](https://dev.mysql.com/downloads/mysql/) on your computer, unless your instructor has set up a class server.

[^singleentity-4]: SQL keywords are shown in uppercase.

It is common practice to abbreviate attribute names, as is done in the following example.

### Defining a table {.unnumbered}

The CREATE command to establish a table called `share` is as follows:

```{}
CREATE TABLE share (
  shrcode  CHAR(3),
  shrfirm  VARCHAR(20) NOT NULL,
  shrprice DECIMAL(6,2),
  shrqty   DECIMAL(8),
  shrdiv   DECIMAL(5,2),
  shrpe    DECIMAL(2),
  PRIMARY KEY (shrcode));
```
